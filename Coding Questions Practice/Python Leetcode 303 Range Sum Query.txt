# Leetcode 303
# Range Sum Query - Immutable
# Given an integer array nums 
# Calculate the sum of the elements of nums between indices
# left and right inclusive where left <= right
# Implement NumArray class

class NumArray(object):
    # initialize the boject iwth the integer array nums
    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums = nums
        # calculate the sums
        self.prefix_sum = []
        self.prefix_sum = [0] * (len(self.nums)+1)
        for i in range(len(self.nums)):
            self.prefix_sum[i+1] = self.prefix_sum[i] + self.nums[i]
        print(self.prefix_sum)



    def sumRange(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: int
        """
        # return the sums of the elements between indices
        # left and right inclusive
        self.left = left
        self.right = right
        
        return self.prefix_sum[right+1] - self.prefix_sum[left]


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(left,right)

